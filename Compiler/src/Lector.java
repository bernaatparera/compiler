// DO NOT EDIT
// Generated by JFlex 1.9.1 http://jflex.de/
// source: C:/Users/User/Desktop/A/Uni/3r/Compiladors/Compilador/AraSi/compiler/untitled/src/lexic/lexic.flex


import java.io.*;


import java.util.ArrayList;
import sintactic.*;
import java_cup.runtime.*;
import java_cup.runtime.ComplexSymbolFactory.ComplexSymbol;
import java_cup.runtime.ComplexSymbolFactory.Location;


@SuppressWarnings("fallthrough")
public class Lector implements java_cup.runtime.Scanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\u10ff\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\2\0\1\1\22\0\1\1\1\3"+
    "\6\0\1\4\1\5\1\6\1\7\1\10\1\11\1\12"+
    "\1\13\1\14\11\15\1\0\1\16\1\17\1\20\1\21"+
    "\2\0\1\22\2\23\1\24\1\25\1\26\5\23\1\27"+
    "\1\23\1\30\1\31\2\23\1\32\1\33\1\34\1\35"+
    "\2\23\1\36\2\23\4\0\1\37\1\0\1\40\1\41"+
    "\1\42\1\23\1\43\1\44\1\23\1\45\1\46\2\23"+
    "\1\47\1\50\1\51\1\52\1\53\1\23\1\54\1\55"+
    "\1\56\1\57\1\23\1\60\3\23\1\61\1\0\1\62"+
    "\u0182\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[512];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\1\1\3\1\4\1\5\1\6"+
    "\1\7\1\10\1\11\1\12\2\13\1\14\1\15\1\16"+
    "\1\17\21\20\1\21\1\22\1\23\1\0\1\24\1\25"+
    "\1\26\1\27\1\30\4\20\1\31\10\20\1\32\6\20"+
    "\1\0\1\33\2\20\1\34\1\35\2\20\1\36\3\20"+
    "\1\37\2\20\1\40\5\20\1\41\1\20\1\42\1\43"+
    "\1\44\1\45\1\20\1\46\2\20\1\47\4\20\1\50"+
    "\1\51\1\20\1\52\1\53\1\20\1\54\1\55\2\20"+
    "\1\56\1\20\1\57\1\60";

  private static int [] zzUnpackAction() {
    int [] result = new int[114];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\63\0\63\0\146\0\63\0\63\0\63\0\63"+
    "\0\63\0\63\0\63\0\231\0\314\0\377\0\63\0\u0132"+
    "\0\u0165\0\u0198\0\u01cb\0\u01fe\0\u0231\0\u0264\0\u0297\0\u02ca"+
    "\0\u02fd\0\u0330\0\u0363\0\u0396\0\u03c9\0\u03fc\0\u042f\0\u0462"+
    "\0\u0495\0\u04c8\0\u04fb\0\63\0\63\0\63\0\u052e\0\u0561"+
    "\0\314\0\63\0\63\0\63\0\u0594\0\u05c7\0\u05fa\0\u062d"+
    "\0\u01fe\0\u0660\0\u0693\0\u06c6\0\u06f9\0\u072c\0\u075f\0\u0792"+
    "\0\u07c5\0\u01fe\0\u07f8\0\u082b\0\u085e\0\u0891\0\u08c4\0\u08f7"+
    "\0\u092a\0\u01fe\0\u095d\0\u0990\0\u01fe\0\u01fe\0\u09c3\0\u09f6"+
    "\0\u01fe\0\u0a29\0\u0a5c\0\u0a8f\0\u01fe\0\u0ac2\0\u0af5\0\u01fe"+
    "\0\u0b28\0\u0b5b\0\u0b8e\0\u0bc1\0\u0bf4\0\63\0\u0c27\0\u01fe"+
    "\0\u01fe\0\u01fe\0\u01fe\0\u0c5a\0\u01fe\0\u0c8d\0\u0cc0\0\u01fe"+
    "\0\u0cf3\0\u0d26\0\u0d59\0\u0d8c\0\u01fe\0\u01fe\0\u0dbf\0\u01fe"+
    "\0\u0df2\0\u0e25\0\u01fe\0\u01fe\0\u0e58\0\u0e8b\0\u01fe\0\u0ebe"+
    "\0\u01fe\0\u01fe";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[114];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\3\24\1\25\1\24\1\26\1\27\2\24"+
    "\1\30\1\24\1\31\1\2\1\24\1\32\1\33\1\34"+
    "\1\35\1\24\1\36\1\24\1\37\2\24\1\40\1\41"+
    "\1\24\1\42\1\24\1\43\1\44\1\45\103\0\1\46"+
    "\50\0\1\47\4\0\1\50\63\0\2\51\61\0\2\16"+
    "\65\0\1\52\62\0\1\53\62\0\1\54\56\0\2\24"+
    "\4\0\6\24\1\55\30\24\16\0\2\24\4\0\37\24"+
    "\16\0\2\24\4\0\1\56\36\24\16\0\2\24\4\0"+
    "\1\57\6\24\1\60\27\24\16\0\2\24\4\0\10\24"+
    "\1\61\26\24\16\0\2\24\4\0\10\24\1\62\26\24"+
    "\16\0\2\24\4\0\6\24\1\63\1\64\27\24\16\0"+
    "\2\24\4\0\30\24\1\65\6\24\16\0\2\24\4\0"+
    "\30\24\1\66\6\24\16\0\2\24\4\0\25\24\1\67"+
    "\11\24\16\0\2\24\4\0\30\24\1\70\4\24\1\71"+
    "\1\24\16\0\2\24\4\0\22\24\1\72\4\24\1\73"+
    "\7\24\16\0\2\24\4\0\16\24\1\74\20\24\16\0"+
    "\2\24\4\0\32\24\1\75\4\24\16\0\2\24\4\0"+
    "\21\24\1\76\15\24\16\0\2\24\4\0\35\24\1\77"+
    "\1\24\16\0\2\24\4\0\23\24\1\100\13\24\2\0"+
    "\6\47\1\101\54\47\2\50\1\0\60\50\14\0\2\24"+
    "\4\0\2\24\1\102\34\24\16\0\2\24\4\0\5\24"+
    "\1\103\31\24\16\0\2\24\4\0\6\24\1\104\30\24"+
    "\16\0\2\24\4\0\10\24\1\105\1\24\1\106\24\24"+
    "\16\0\2\24\4\0\13\24\1\107\23\24\16\0\2\24"+
    "\4\0\7\24\1\110\27\24\16\0\2\24\4\0\10\24"+
    "\1\111\26\24\16\0\2\24\4\0\30\24\1\112\6\24"+
    "\16\0\2\24\4\0\27\24\1\113\7\24\16\0\2\24"+
    "\4\0\33\24\1\114\3\24\16\0\2\24\4\0\32\24"+
    "\1\115\4\24\16\0\2\24\4\0\27\24\1\116\7\24"+
    "\16\0\2\24\4\0\31\24\1\117\2\24\1\120\2\24"+
    "\16\0\2\24\4\0\24\24\1\121\12\24\16\0\2\24"+
    "\4\0\24\24\1\122\12\24\16\0\2\24\4\0\34\24"+
    "\1\123\2\24\16\0\2\24\4\0\31\24\1\124\5\24"+
    "\16\0\2\24\4\0\24\24\1\125\12\24\2\0\13\47"+
    "\1\126\47\47\14\0\2\24\4\0\11\24\1\127\25\24"+
    "\16\0\2\24\4\0\2\24\1\130\34\24\16\0\2\24"+
    "\4\0\3\24\1\131\33\24\16\0\2\24\4\0\10\24"+
    "\1\132\26\24\16\0\2\24\4\0\25\24\1\133\11\24"+
    "\16\0\2\24\4\0\33\24\1\134\3\24\16\0\2\24"+
    "\4\0\21\24\1\135\15\24\16\0\2\24\4\0\20\24"+
    "\1\136\16\24\16\0\2\24\4\0\35\24\1\137\1\24"+
    "\16\0\2\24\4\0\27\24\1\140\7\24\16\0\2\24"+
    "\4\0\27\24\1\141\7\24\16\0\2\24\4\0\35\24"+
    "\1\142\1\24\16\0\2\24\4\0\25\24\1\143\11\24"+
    "\16\0\2\24\4\0\25\24\1\144\11\24\16\0\2\24"+
    "\4\0\3\24\1\145\33\24\16\0\2\24\4\0\34\24"+
    "\1\146\2\24\16\0\2\24\4\0\34\24\1\147\2\24"+
    "\16\0\2\24\4\0\34\24\1\150\2\24\16\0\2\24"+
    "\4\0\34\24\1\151\2\24\16\0\2\24\4\0\32\24"+
    "\1\152\4\24\16\0\2\24\4\0\21\24\1\153\15\24"+
    "\16\0\2\24\4\0\21\24\1\154\15\24\16\0\2\24"+
    "\4\0\24\24\1\155\12\24\16\0\2\24\4\0\25\24"+
    "\1\156\11\24\16\0\2\24\4\0\27\24\1\157\7\24"+
    "\16\0\2\24\4\0\30\24\1\160\6\24\16\0\2\24"+
    "\4\0\27\24\1\161\7\24\16\0\2\24\4\0\27\24"+
    "\1\162\7\24\2\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[3825];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\2\11\1\1\7\11\3\1\1\11\24\1\3\11"+
    "\1\0\2\1\3\11\24\1\1\0\24\1\1\11\34\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[114];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen())];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */
    private ArrayList<String> symbols = new ArrayList<String>();

    public void printVars(PrintStream out) {
        if (symbols.isEmpty()) {
            out.println("No symbols scanned");
            } else {
                String fmt = "Symbol -> %s";
                for(int i =0;i<symbols.size();i++){
                    out.println(String.format(fmt, symbols.get(i)));
                }
        }
    }

    private ComplexSymbol symbol(int type) {

        Location left = new Location(yyline+1, yycolumn+1);
        Location right = new Location(yyline+1, yycolumn+yytext().length()+1);

        return new ComplexSymbol(ParserSym.terminalNames[type], type, left, right);
    }

    private Symbol symbol(int type, Object value) {

        Location left = new Location(yyline+1, yycolumn+1);
        Location right = new Location(yyline+1, yycolumn+yytext().length()+1);

        return new ComplexSymbol(ParserSym.terminalNames[type], type, left, right, value);
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lector(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate && zzCanGrow()) {
      /* if not, and it can grow: blow it up */
      char newBuffer[] = new char[Math.min(zzBuffer.length * 2, zzMaxBufferLen())];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      if (requested == 0) {
        throw new java.io.EOFException("Scan buffer limit reached ["+zzBuffer.length+"]");
      }
      else {
        throw new java.io.IOException(
            "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
      }
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    int initBufferSize = Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen());
    if (zzBuffer.length > initBufferSize) {
      zzBuffer = new char[initBufferSize];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
  yyclose();    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  @Override  public java_cup.runtime.Symbol next_token() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          {   return symbol(ParserSym.EOF);
 }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { symbols.add("Unknown: ");
                                        return symbol(ParserSym.error);
            }
          // fall through
          case 49: break;
          case 2:
            { //empty
            }
          // fall through
          case 50: break;
          case 3:
            { symbols.add("KeyWord: (");
                            return symbol(ParserSym.openp);
            }
          // fall through
          case 51: break;
          case 4:
            { symbols.add("KeyWord: )");
                            return symbol(ParserSym.closep);
            }
          // fall through
          case 52: break;
          case 5:
            { symbols.add("KeyWord: *");
                            return symbol(ParserSym.mulop);
            }
          // fall through
          case 53: break;
          case 6:
            { symbols.add("KeyWord: +");
                            return symbol(ParserSym.sumop);
            }
          // fall through
          case 54: break;
          case 7:
            { symbols.add("KeyWord: ,");
                            return symbol(ParserSym.comma);
            }
          // fall through
          case 55: break;
          case 8:
            { symbols.add("KeyWord: -");
                            return symbol(ParserSym.minop);
            }
          // fall through
          case 56: break;
          case 9:
            { symbols.add("KeyWord: .");
                             return symbol(ParserSym.dot);
            }
          // fall through
          case 57: break;
          case 10:
            { symbols.add("KeyWord: /");
                            return symbol(ParserSym.divop);
            }
          // fall through
          case 58: break;
          case 11:
            { symbols.add("Number: "+yytext());
                            return symbol(ParserSym.number, Integer.parseInt(yytext()));
            }
          // fall through
          case 59: break;
          case 12:
            { symbols.add("KeyWord: ;");
                            return symbol(ParserSym.semicolon);
            }
          // fall through
          case 60: break;
          case 13:
            { symbols.add("KeyWord: <");
                            return symbol(ParserSym.lessrel);
            }
          // fall through
          case 61: break;
          case 14:
            { symbols.add("KeyWord: =");
                            return symbol(ParserSym.equal);
            }
          // fall through
          case 62: break;
          case 15:
            { symbols.add("KeyWord: >");
                            return symbol(ParserSym.greaterrel);
            }
          // fall through
          case 63: break;
          case 16:
            { symbols.add("Identifier: " +yytext());
                           return(symbol(ParserSym.id, this.yytext()));
            }
          // fall through
          case 64: break;
          case 17:
            { symbols.add("KeyWord: {");
                            return symbol(ParserSym.openb);
            }
          // fall through
          case 65: break;
          case 18:
            { symbols.add("KeyWord: }");
                            return symbol(ParserSym.closeb);
            }
          // fall through
          case 66: break;
          case 19:
            { symbols.add("KeyWord: !=");
                            return symbol(ParserSym.notequalrel);
            }
          // fall through
          case 67: break;
          case 20:
            { /*Ignore*/
                            symbols.add("Comment");
            }
          // fall through
          case 68: break;
          case 21:
            { return symbol(ParserSym.error);
            }
          // fall through
          case 69: break;
          case 22:
            { symbols.add("KeyWord: <=");
                            return symbol(ParserSym.lesseqrel);
            }
          // fall through
          case 70: break;
          case 23:
            { symbols.add("KeyWord: ==");
                            return symbol(ParserSym.equalrel);
            }
          // fall through
          case 71: break;
          case 24:
            { symbols.add("KeyWord: >=");
                            return symbol(ParserSym.greatereqrel);
            }
          // fall through
          case 72: break;
          case 25:
            { symbols.add("KeyWord: OR");
                            return symbol(ParserSym.or);
            }
          // fall through
          case 73: break;
          case 26:
            { symbols.add("KeyWord: if");
                            return symbol(ParserSym.ift);
            }
          // fall through
          case 74: break;
          case 27:
            { symbols.add("KeyWord: AND");
                            return symbol(ParserSym.and);
            }
          // fall through
          case 75: break;
          case 28:
            { symbols.add("KeyWord: NOR");
                            return symbol(ParserSym.nor);
            }
          // fall through
          case 76: break;
          case 29:
            { symbols.add("KeyWord: NOT");
                            return symbol(ParserSym.not);
            }
          // fall through
          case 77: break;
          case 30:
            { symbols.add("KeyWord: XOR");
                            return symbol(ParserSym.xor);
            }
          // fall through
          case 78: break;
          case 31:
            { symbols.add("KeyWord: for");
                            return symbol(ParserSym.fort);
            }
          // fall through
          case 79: break;
          case 32:
            { symbols.add("KeyWord: int");
                            return symbol(ParserSym.integer);
            }
          // fall through
          case 80: break;
          case 33:
            { /*Ignore*/
                            symbols.add("blockComment");
            }
          // fall through
          case 81: break;
          case 34:
            { symbols.add("KeyWord: NAND");
                            return symbol(ParserSym.nand);
            }
          // fall through
          case 82: break;
          case 35:
            { symbols.add("KeyWord: TRUE");
                            return symbol(ParserSym.truet);
            }
          // fall through
          case 83: break;
          case 36:
            { symbols.add("KeyWord: XNOR");
                            return symbol(ParserSym.xnor);
            }
          // fall through
          case 84: break;
          case 37:
            { symbols.add("KeyWord: bool");
                            return symbol(ParserSym.bool);
            }
          // fall through
          case 85: break;
          case 38:
            { symbols.add("KeyWord: else");
                            return symbol(ParserSym.elset);
            }
          // fall through
          case 86: break;
          case 39:
            { symbols.add("KeyWord: main");
                            return symbol(ParserSym.main);
            }
          // fall through
          case 87: break;
          case 40:
            { symbols.add("KeyWord: FALSE");
                            return symbol(ParserSym.falset);
            }
          // fall through
          case 88: break;
          case 41:
            { symbols.add("KeyWord: const");
                            return symbol(ParserSym.constt);
            }
          // fall through
          case 89: break;
          case 42:
            { symbols.add("KeyWord: input");
                            return symbol(ParserSym.input);
            }
          // fall through
          case 90: break;
          case 43:
            { symbols.add("KeyWord: print");
                            return symbol(ParserSym.print);
            }
          // fall through
          case 91: break;
          case 44:
            { symbols.add("KeyWord: tuple");
                            return symbol(ParserSym.tuple);
            }
          // fall through
          case 92: break;
          case 45:
            { symbols.add("KeyWord: while");
                            return symbol(ParserSym.whilet);
            }
          // fall through
          case 93: break;
          case 46:
            { symbols.add("KeyWord: return");
                            return symbol(ParserSym.returnt);
            }
          // fall through
          case 94: break;
          case 47:
            { symbols.add("KeyWord: println");
                            return symbol(ParserSym.println);
            }
          // fall through
          case 95: break;
          case 48:
            { symbols.add("KeyWord: function");
                            return symbol(ParserSym.function);
            }
          // fall through
          case 96: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
